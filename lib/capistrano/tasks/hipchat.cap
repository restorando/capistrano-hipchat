namespace :hipchat do

  task :notify_deploy_failed do
    message = "#{local_user.strip} cancelled deployment of #{fetch(:application)} to #{fetch(:stage)}."

    fetch(:hipchat_room)
      .send(fetch(:hipchat_bot_name, "Deployer"), message, message_notification: false, color: 'red')
  end

  task :notify_deploy_started do
    commits = `git log --no-color --max-count=5 --pretty=format:' - %an: %s' --abbrev-commit --no-merges #{fetch(:current_revision, "HEAD")}..#{fetch(:previous_revision, "HEAD")}`
    commits.gsub!("\n", "<br />")
    message = "#{local_user.strip} is deploying #{fetch(:application)} to #{fetch(:stage)} <br />"
    message << commits

    fetch(:hipchat_room)
      .send(fetch(:hipchat_bot_name, "Deployer"), message, message_notification: false)
  end

  task :notify_deploy_finished do
    message = "#{local_user.strip} finished deploying #{fetch(:application)} to #{fetch(:stage)}."

    fetch(:hipchat_room)
      .send(fetch(:hipchat_bot_name, "Deployer"), message, message_notification: false, color: 'green')
  end

  after "deploy:updated", "hipchat:notify_deploy_started"
  after "deploy:finishing", "hipchat:notify_deploy_finished"
  after "deploy:reverted", "hipchat:notify_deploy_failed"
end

namespace :load do
  task :defaults do
    require 'hipchat'
    set(:hipchat_room, -> { HipChat::Client.new(fetch(:hipchat_token))[fetch(:hipchat_room_name)] })
  end
end
